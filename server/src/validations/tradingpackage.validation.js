'use strict';

const JoiBase = require("@hapi/joi");
const JoiDate = require("@hapi/joi-date");

const Joi = JoiBase.extend(JoiDate);

/**
 * Trading Package Validation Schema
 */
const tradingPackageValidation = {
    /**
     * Add Trading Package Validation
     * Note: package_number and sort_order are auto-generated by the system
     */
    add: Joi.object({
        name: Joi.string()
            .trim()
            .min(2)
            .max(100)
            .required()
            .messages({
                'string.empty': 'Package name is required',
                'string.min': 'Package name must be at least 2 characters long',
                'string.max': 'Package name cannot exceed 100 characters',
                'any.required': 'Package name is required'
            }),

        // package_number is auto-generated - removed from validation

        trading_amount_from: Joi.number()
            .min(1)
            .max(1000000)
            .required()
            .messages({
                'number.base': 'Trading amount from must be a number',
                'number.min': 'Minimum trading amount must be at least $1',
                'number.max': 'Minimum trading amount cannot exceed $1,000,000',
                'any.required': 'Minimum trading amount is required'
            }),

        trading_amount_to: Joi.number()
            .min(1)
            .max(10000000)
            .when('is_unlimited', {
                is: false,
                then: Joi.number().greater(Joi.ref('trading_amount_from')).required(),
                otherwise: Joi.number().optional().allow(null)
            })
            .messages({
                'number.base': 'Trading amount to must be a number',
                'number.min': 'Maximum trading amount must be at least $1',
                'number.max': 'Maximum trading amount cannot exceed $10,000,000',
                'number.greater': 'Maximum trading amount must be greater than minimum trading amount',
                'any.required': 'Maximum trading amount is required for limited packages'
            }),

        daily_trading_roi: Joi.number()
            .min(0.01)
            .max(100)
            .precision(2)
            .required()
            .messages({
                'number.base': 'Daily trading ROI must be a number',
                'number.min': 'Daily trading ROI must be at least 0.01%',
                'number.max': 'Daily trading ROI cannot exceed 100%',
                'any.required': 'Daily trading ROI is required'
            }),

        description: Joi.string()
            .trim()
            .max(500)
            .allow('')
            .optional()
            .messages({
                'string.max': 'Description cannot exceed 500 characters'
            }),

        features: Joi.array()
            .items(Joi.string().trim().min(1).max(200))
            .min(1)
            .max(10)
            .optional()
            .default([])
            .messages({
                'array.min': 'At least one feature is recommended',
                'array.max': 'Cannot have more than 10 features',
                'string.min': 'Feature cannot be empty',
                'string.max': 'Each feature cannot exceed 200 characters'
            }),

        is_unlimited: Joi.boolean()
            .optional()
            .default(false),

        // sort_order is auto-generated based on package_number - removed from validation

        status: Joi.boolean()
            .optional()
            .default(true)
    }),

    /**
     * Update Trading Package Validation
     */
    update: Joi.object({
        id: Joi.string()
            .required()
            .messages({
                'string.empty': 'Trading package ID is required',
                'any.required': 'Trading package ID is required'
            }),

        name: Joi.string()
            .trim()
            .min(2)
            .max(100)
            .optional()
            .messages({
                'string.min': 'Package name must be at least 2 characters long',
                'string.max': 'Package name cannot exceed 100 characters'
            }),

        // package_number is auto-generated and cannot be updated

        trading_amount_from: Joi.number()
            .min(1)
            .max(1000000)
            .optional()
            .messages({
                'number.base': 'Trading amount from must be a number',
                'number.min': 'Minimum trading amount must be at least $1',
                'number.max': 'Minimum trading amount cannot exceed $1,000,000'
            }),

        trading_amount_to: Joi.number()
            .min(1)
            .max(10000000)
            .optional()
            .messages({
                'number.base': 'Trading amount to must be a number',
                'number.min': 'Maximum trading amount must be at least $1',
                'number.max': 'Maximum trading amount cannot exceed $10,000,000'
            }),

        daily_trading_roi: Joi.number()
            .min(0.01)
            .max(10)
            .precision(2)
            .optional()
            .messages({
                'number.base': 'Daily trading ROI must be a number',
                'number.min': 'Daily trading ROI must be at least 0.01%',
                'number.max': 'Daily trading ROI cannot exceed 10% for safety'
            }),

        description: Joi.string()
            .trim()
            .max(500)
            .allow('')
            .optional()
            .messages({
                'string.max': 'Description cannot exceed 500 characters'
            }),

        features: Joi.array()
            .items(Joi.string().trim().min(1).max(200))
            .max(10)
            .optional()
            .messages({
                'array.max': 'Cannot have more than 10 features',
                'string.min': 'Feature cannot be empty',
                'string.max': 'Each feature cannot exceed 200 characters'
            }),

        is_unlimited: Joi.boolean()
            .optional(),

        // sort_order is auto-generated and cannot be updated

        status: Joi.boolean()
            .optional()
    }),

    /**
     * Update Status Validation
     */
    updateStatus: Joi.object({
        id: Joi.string()
            .required()
            .messages({
                'string.empty': 'Trading package ID is required',
                'any.required': 'Trading package ID is required'
            }),

        status: Joi.boolean()
            .required()
            .messages({
                'boolean.base': 'Status must be a boolean value',
                'any.required': 'Status is required'
            })
    })
};

module.exports = tradingPackageValidation;
